Exploring error handling patterns and strategies

error is based on the subscribe() method. 
The subscribe() method takes as input the object Observer, 
which has three callbacks:

A success callback: This is called every time the stream emits a value and receives as input the value emitted.
An error callback: This is called when an error occurs and receives as input the error itself.
A completion callback: This is called when the stream completes.

A success callback that logs the received value in the console
An error callback that logs the received error in the console
A complete callback that logs the stream completion:

    stream$.subscribe({
     next: (res) => console.log('Value Emitted', res),
     error: (err) => console.log('Error Occurred', err),
     complete: () => console.log('Stream Completed'),
})

Issues with subscribe({})
Using this approach, we cannot, recover from the error or 
emit an alternative  fallback value that replaces the 
value that we were expecting from the backend.

__________________________________________________________________________

try-catch 
which consists of a try block followed by one or more catch 
clauses. In the try block, you place your risky statements, 
and inside catch, you handle the possible exceptions:


    try {
      // risky statements
   }
   catch(error) {
       // handle exceptions
   }

RxJS has the catchError operator, which provides us with 
something close to the try-catch statement
The catchError operator is going to take the error and 
pass it to the error handling function.

The catchError operator
catchError, according to the RxJS official documentation, 
"catches errors on the observable to be handled by returning a new observable 
or throwing an error."
The catchError operator subscribes to the source Observable that might error 
out and emits values to the observer until an error occurs. When that happens, 
the catchError operator executes a callback function, passing in the error. 
This callback function is responsible for handling errors and always returns an Observable.

If there are no errors, the output Observable returned by catchError works exactly 
the same way as the source Observable. You can use catchError multiple times in 
an Observable chain:

 import { catchError} from 'rxjs/operators';
//stream$ is the source Observable that might error out
stream$.pipe(
      catchError(error => {
          //handle the error received
      })
    ).subscribe()
  }

When it comes to handling errors, there are three strategies:

A replace strategy
A rethrow strategy
A retry strategy

A replace strategy
The error handling function returns an Observable, which is going to be a replacement Observable for the stream that just errored out. 
This replacement Observable is then going to be subscribed to, and its values are going to be used in place of the errored-out input Observable:

import { from, of } from 'rxjs';
import { catchError, map } from 'rxjs/operators';
const stream$ = from(['5', '10', '6', 'Hello', '2']);
stream$
  .pipe(
    map((value) => {
      if (isNaN(value as any)) {
        throw new Error('This is not a number');
      }
      return parseInt(value);
    }),
    /*
    catchError((error) => {
      console.log('Caught Error', error);
      return of();
    })
  )
  */
  .subscribe({
    next: (res) => console.log('Value Emitted', res),
    error: (err) => console.log('Error Occurred', err),
    complete: () => console.log('Stream Completed'),
  });
//output
Value Emitted 5
Value Emitted 10
Value Emitted 6
Caught Error Error: This is not a number
Stream Completed

1. We have an Observable stream$ created from an array of string values, ['5', '10', '6', 'Hello', '2'], using the from creation operator.
2. from operator - Converts almost anything to an Observable that can be iterated
example 
          import { from } from 'rxjs';

        const array = [10, 20, 30];
        const result = from(array);

        result.subscribe(x => console.log(x));

        // Logs:
        // 10
        // 20
        // 30

3. We use two operators on stream$:

The map operator: To transform the string values emitted to integers using the parseInt() method. If the value emitted is not a number, then the "This is not a number" error is thrown.
The catchError operator: We pass to it the error handling function that will log the catched error and return an empty of()Observable.

4. Then, we subscribe to the stream$ and log a custom message in every callback.
What happens at execution time?

At execution time, stream$ will emit the string values of the array one by one, respectively '5', '10', and '6'. The map takes those values one by one as input and returns respectively the 5, 10, and 6 integers. catchError() takes the values emitted from the map operator and forwards them as output; the error handling function will not get called, as there is no error. Hence, the subscribers receive 5, 10, and 6.

catchError() comes into play when the 'Hello' value is emitted. The map operator will throw an error, and the error handling function in catchError() will get called consequently.

The error handling function in our case simply logs an error in the console and returns an empty Observable in this example. This empty Observable will be the replacement Observable.

catchError() will subscribe under the hood to the returned Observable. The of() Observable will emit a value and complete. The empty value is emitted and then stream$ is completed, so the second value will not get emitted.

As you may have noticed, the error callback in the subscribe() method will not get called because we handled it. I added it on purpose to understand the behavior of error handling with catchError.

Therefore, when an error occurs, the current stream that errored out will get replaced by the stream returned from the catchError(); the values of the replaced Observable will then get emitted instead of the original stream values. This is what we call fallback values.


A rethrow strategy
A rethrow strategy consists in rethrowing the error or, in other words, 
propagating the error to the subscribers of the output Observable of catchError. 
This propagation mechanism allows you to rethrow the error caught by catchError and not only handle it locally. Let's look at this example, which is the same as the replace strategy one. The only difference is in the handling error function:

import { from, throwError } from 'rxjs';
import { catchError, map } from 'rxjs/operators';
const stream$ = from(['5', '10', '6', 'Hello', '2']);
stream$
  .pipe(
    map((value) => {
      if (isNaN(value as any)) {
        throw new Error('This is not a number');
      }
      return parseInt(value);
    }),
    catchError((error) => {
      console.log('Caught Error', error);
      return throwError(() => error);
    })
  )
  .subscribe({
    next: (res) => console.log('Value Emitted', res),
    error: (err) => console.log('Error Occurred', err),
    complete: () => console.log('Stream Completed'),
  });
//output
Value Emitted 5
Value Emitted 10
Value Emitted 6
Caught Error Error: This is not a number
Error Occurred Error: This is not a number


In the handle error function, we return an Observable that is created using the throwError operator.
 throwError creates an Observable that never emits any value. Instead, it errors out immediately using the same error caught by catchError.
  the output Observable of catchError will also error out with the exact same error thrown by the source Observable. The error can now be further handled by the rest of the Observable chain, if needed. As you may have noticed, the same error was logged both in the catchError block and in the subscriber error handler function, as expected.

  Please note that in the previous examples, we simply log the error in the console for demonstration purposes. But in a real-world scenario, you can do much more, such as showing messages to the users.

___________________________________________________________________________________
Catch and replace strategy

const http$ = this.http.get<Books[]>('/api/books');

http$
    .pipe(
        catchError(err => of([]))
    )
    .subscribe(
        res => console.log('HTTP response', res),
        err => console.log('HTTP Error', err),
        () => console.log('HTTP request completed.')
    );

    Let's break down the implementation of the catch and replace strategy:

we are passing to the catchError operator a function, which is the error handling function
the error handling function is not called immediately, and in general, it's usually not called
only when an error occurs in the input Observable of catchError, will the error handling function be called
if an error happens in the input stream, this function is then returning an Observable built using the of([]) function
the of() function builds an Observable that emits only one value ([]) and then it completes
the error handling function returns the recovery Observable (of([])), that gets subscribed to by the catchError operator
the values of the recovery Observable are then emitted as replacement values in the output Observable returned by catchError
As the end result, the http$ Observable will not error out anymore! Here is the result that we get in the console:

HTTP response []
HTTP request completed.
As we can see, the error handling callback in subscribe() is not invoked anymore. Instead, here is what happens:

the empty array value [] is emitted
the http$ Observable is then completed
As we can see, the replacement Observable was used to provide a default fallback value ([]) to the subscribers of http$, 
despite the fact that the original Observable did error out.

Notice that we could have also added some local error handling, before returning the replacement Observable!

___________________________________________________________________________________________________________________________

Retrying strategy

You can also retry the observable using the retry operator to give another chance to the stream. The retry operator retries an Observable a specific number of times. It is useful for retrying HTTP requests, for example:

import { catchError, map, retry } from 'rxjs/operators';
import { from, throwError } from 'rxjs';
const stream$ = from(['5', '10', '6', 'Hello', '2']);
stream$
  .pipe(
    map((value) => {
      if (isNaN(value as any)) {
        throw new Error('This is not a number');
      }
      return parseInt(value);
    }),
    retry(2),
    catchError((error) => {
      console.log('Caught Error', error);
      return throwError(() => error);
    })
  )
  .subscribe({
    next: (res) => console.log('Value Emitted', res),
    error: (err) => console.log('Error Occurred', err),
    complete: () => console.log('Stream Completed'),
  });
//output
Value Emitted 5
10
6
5
10
6
5
10
6
Caught Error Error: This is not a number
Error Occurred Error: This is not a number

__________________________________________________________________________

RetryWhen

import { from} from 'rxjs';
import { map, retryWhen, tap } from 'rxjs/operators';
const stream$ = from(['5', '10', '6', 'Hello', '2']);
stream$
  .pipe(
    map((value) => {
      if (isNaN(value as any)) {
        throw new Error('This is not a number');
      }
      return parseInt(value);
    }),
    retryWhen((errors) => {
      return errors.pipe(
        tap(() => console.log('Retrying the source 
                              Observable...'))
      );
    })
  )
  .subscribe({
    next: (res) => console.log('Value Emitted', res),
    error: (err) => console.log('Error Occurred', err),
    complete: () => console.log('Stream Completed'),
  });
//Code runs infinitely


If you execute that code, you will find out that it runs infinitely. Why? Because the source will always error out, and retryWhen will consequently subscribe infinitely to the source Observable.

If the source always errors out, it is not correct to retry immediately. However, the error will not always occur – for example, in the case of HTTP requests. Sometimes, the HTTP request fails because the server is down, or there is another reason that may disappear, and the request might go through in the next attempts without any problem.

In that case, you can use the immediate retry or even a delayed retry, which is retrying after a certain delay where we can wait, for example, for 5 seconds after the error occurs before retrying.

__________________________________________________________________________

The delayWhen operator
The first Observable is the source Observable. Every value emitted by the source Observable will be delayed before being emitted to the output Observable. The delay is completely flexible through the durationSelector function.

Each of the a, b, and c values has its own duration selector Observable, which will emit one value and then complete. When the selector emits a value, the corresponding a, b, or c input value is going to show up in the output of delayWhen.

As you can see, the selector of b emitted the last one; that's why the b value was emitted last.

delayWhen can be used when you need to delay a value until some other action takes place. For example, when you login a user and return the token, you may need to perform an action on the token before returning it to the calling method.

Here’s an example that demonstrates how wait until the token is added to the local storage before sending it to the observer:

login().pipe(
   delayWhen((user) => setToLocalStorage(user))
).subscribe((user) => console.log(user));

function login() {
   return fromFetch('https://reqres.in/api/users/2').pipe(
       switchMap((response) => response.json())
   );
}

function setToLocalStorage(value) {
   return of(value).pipe(
       tap((value) => {
           localStorage.setItem('token', JSON.stringify(value));
       })
   );
}

https://indepth-rxjs-delay-when.stackblitz.io

__________________________________________________________________________

replacement strategy use case

import { Injectable } from '@angular/core';
import { HttpClient } from '@angular/common/http';
import { Recipe } from '../model/recipe.model';
import { environment } from 'src/environments/environment';
import { catchError, of } from 'rxjs';
const BASE_PATH = environment.basePath
@Injectable({
  providedIn: 'root'
})
export class RecipesService {
  recipes$ = this.http.get<Recipe[]>(
   '${BASE_PATH}/recipes').pipe(
    catchError(error => of([])));
  constructor(private http: HttpClient) { }
}


This way, your application will keep on working, and if you open the app, you will see an empty list.

